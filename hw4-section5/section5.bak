#lang racket
(provide (all-defined-out))

(define x 3) ; val x = 3
(define cube
  (lambda (x)
    (* x x x)))

(define (cube2 x)
     (* x x x)) ; syntax sugar

(define (pow1 x y)
  (if (= y 0)
      1
      (* x (pow1 x (- y 1)))))

; use currying
(define pow2
  (lambda (x)
    (lambda (y)
      (pow1 x y))))
; partially apply
(define three-to-the (pow2 3))

(define (sum xs)
  (if (null? xs)
      0
      (+ (car xs) (sum (cdr xs)))))

; append
(define (my-append xs ys) ; not currying, just two arguments
  (if (null? xs)
      ys
      (cons (car xs) (my-append (cdr xs) ys))))

; map
(define (my-map f xs)
  (if (null? xs)
      null
      (cons (f (car xs))
            (my-map f (cdr xs)))))